generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                    Int         @id @default(autoincrement())
  name                  String
  email                 String      @unique
  password              String
  isOwner               Boolean     @default(true)
  createdAt             DateTime?   @default(now()) @db.Timestamptz()
  updatedAt             DateTime    @updatedAt @db.Timestamptz()
  lastActivityAt        DateTime?   @db.Timestamptz()
  deletionWarningSentAt DateTime?   @db.Timestamptz()
  markedForDeletionAt   DateTime?   @db.Timestamptz()
  
  ownedStores Store[] @relation("StoreOwner")
  AuditLog   AuditLog[]

  @@map("users")
}

model Store {
  id             Int      @id @default(autoincrement())
  name           String
  city           String
  state          String @db.Char(2)
  zipCode        String @db.Char(9)
  ownerId        Int
  createdAt      DateTime? @default(now()) @db.Timestamptz()
  updatedAt      DateTime @updatedAt @db.Timestamptz()
  deletedAt      DateTime?  @db.Timestamptz()
  isDeleted      Boolean  @default(false)
  lastActivityAt DateTime?  @db.Timestamptz()

  owner    User   @relation("StoreOwner", fields: [ownerId], references: [id])
  storeUsers StoreUser[] @relation("StoreUserStoreRelation")
  categories      Category[]
  products        Product[]
  stockMovimentsOrigin   StockMoviment[]  @relation("StockMovimentOrigin")
  stockMovimentsDestination StockMoviment[] @relation("StockMovimentDestination")
  roles           Role[]            @relation("RoleStoreRelation")
  StockMovimentStore StockMovimentStore[]
  AuditLog        AuditLog[]

  @@map("stores")
}

model StoreUser {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  roleId    Int
  storeId   Int
  createdBy Int
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  deletedBy Int?
  deletedAt DateTime? @db.Timestamptz()
  isDeleted Boolean  @default(false)

  store    Store    @relation(fields: [storeId], references: [id], name: "StoreUserStoreRelation")
  role      Role     @relation(fields: [roleId], references: [id])
  AuditLog AuditLog[]
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  storeId   Int
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  deletedAt DateTime? @db.Timestamptz()
  isDeleted Boolean  @default(false)

  store                Store                   @relation(fields: [storeId], references: [id], name: "RoleStoreRelation")
  permissions      RolePermissionAssociation[] @relation("RoleToPermission")
  StoreUser StoreUser[]

  @@unique([name, storeId])
}

model Permission {
  id        Int      @id @default(autoincrement())
  name      String
  action    String
  resource  String
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  role RolePermissionAssociation[] @relation("PermissionToRole")
}

model RolePermissionAssociation {
  id          Int      @id @default(autoincrement())
  roleId      Int
  permissionId Int
  createdAt   DateTime @default(now()) @db.Timestamptz()
  updatedAt   DateTime @updatedAt @db.Timestamptz()

  role        Role       @relation(fields: [roleId], references: [id], name: "RoleToPermission")
  permission  Permission @relation(fields: [permissionId], references: [id], name: "PermissionToRole")
  @@unique([roleId, permissionId])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  storeId   Int
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  deletedAt DateTime? @db.Timestamptz()
  isDeleted Boolean  @default(false)

  store    Store    @relation(fields: [storeId], references: [id])
  products Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  sku         String
  banner      String
  name        String
  stock       Int      @default(0)
  price       String   @default("0.00")
  description String
  storeId     Int
  categoryId  Int
  createdAt   DateTime? @default(now()) @db.Timestamptz()
  updatedAt   DateTime @updatedAt @db.Timestamptz()
  deletedAt   DateTime? @db.Timestamptz()
  isDeleted   Boolean  @default(false)

  store      Store    @relation(fields: [storeId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  stockMoviment StockMoviment[]

  @@index([sku, storeId])
  @@unique([sku, storeId])
}

model StockMoviment {
  id          Int      @id @default(autoincrement())
  productId   Int
  stock       Int      @default(0)
  type        String
  storeId     Int
  destinationStoreId Int? 
  isValid     Boolean  @default(true)
  createdBy       Int
  createdAt   DateTime? @default(now()) @db.Timestamptz()
  updatedAt   DateTime @updatedAt @db.Timestamptz()
  deletedAt   DateTime? @db.Timestamptz()
  isDeleted   Boolean  @default(false)

  product           Product           @relation(fields: [productId], references: [id])
  store             Store             @relation("StockMovimentOrigin" ,fields: [storeId], references: [id])
  destinationStore  Store?    @relation("StockMovimentDestination", fields: [destinationStoreId], references: [id])
  stockMovimentStore StockMovimentStore[]
}

model StockMovimentStore {
  id              Int      @id @default(autoincrement())
  stockMovimentId Int
  storeId         Int
  deletedAt       DateTime? @db.Timestamptz()
  isDeleted       Boolean  @default(false)

  stockMoviment StockMoviment @relation(fields: [stockMovimentId], references: [id])
  store         Store         @relation(fields: [storeId], references: [id])
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  action      String
  details     String?
  userId      Int?
  storeUserId Int?
  storeId     Int?
  ipAddress   String?
  userAgent   String?
  isOwner     Boolean?
  createdAt   DateTime @default(now()) @db.Timestamptz()

  user      User?      @relation(fields: [userId], references: [id])
  storeUser StoreUser? @relation(fields: [storeUserId], references: [id])
  store     Store?     @relation(fields: [storeId], references: [id])
}